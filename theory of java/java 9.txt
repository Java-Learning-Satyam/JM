section 11
 
# Abstraction and generalization
 
 these both are used when cteating real world appilcations/Software

 we genralize when we want to create class hierarchy, base class is the most general class, it contain everything we want to have common

 objects are generalized and abstract class are created 

 java supports abstraction in several ways 
  
 Allows us to create a class hierarchy, where the top of the hierarchy, the base class is usually an abstract concept, weather it's an abstract or not
 java let's us create abstract class
 java gives us a way to create interfaces

 An abstract method -- method has a signature, and a return type, but dosen't have a method body -- because of this we say an abstract method is unimplemented -- purpose to describe behaviour which an obj always will have

 Concrete method == atleast one statement, means have operational code 
 A conctrete method is said to implement an absteact method, if it overrides one 
 Abst class and interfaces, can have a mix of abstract and concretem method

 we cannot create a method of an abstract class
 a abstract method not even have have curly braces{} 
 
 public abstract void move();


 # Interface 
 an interface is a point where two system interact like human  --- phone 
 an interface have similar methods, it is not a class 
 by declaring and using an interface, your class have to implement all method which are defined in a interface

public interface FightEnabled {}
 
 A class is associated to an interface, by using the implements clause in the class decleration 

public class Bird implements FlightEnabled{ }
 
Constants in java are always types in uperCase
 
 An interface can also be extended, similar to classes, using extends keyword, but it cannot implements another interface
 interface OrbitEarth implements FlightEnabled {} // INVALID
 
 interface Orbit extends FlightEnabled {} // Valid

 interface OrnitEarth extends FlightEnabled, Trackable {}

 When you use an absteacted refrence type, this is referred to as (coding to an interface).
 refrence type -- var name of an object like 
 Car scorpio = new Car("Black","Top Varient");
 This means your code dosen't use specific types, but more generalized one, ususlly an interface type.
 
 you can use interface (implements) on enum, record, class  

 
        List<FlightEnabled> betterFliers = new LinkedList<>(); // this is a better way of coding 

 one of the method call to (coding to interface)

 private static void triggerFliers(List<FlightEnabled> fliers) {  // int this insted of using arrayList, LinkList type we se interface List

        for (var flier : fliers) {
            flier.takeOff();
        }
    }

 in JDK 8 java introduced default methods and public static methods, and JDK 9 introduces private methods, both static and non-Static
 
 so As we know that a an interface has methods that classes that implement those interfaces has to write 
 
 but immagin if your code is a liberary, changing one interface wolud affect the whole liberary, 
 
 so seeing this java brings anoter feature called default modifier, commomly known as default method, it is a concrete method, in fact it has to have a method body even an empty set of curly braces
 
 we can also implement static method in an iterface
 