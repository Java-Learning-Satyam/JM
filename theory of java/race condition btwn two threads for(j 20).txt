race condition btwn two threads

package dev.lpa;


public class Main {

// every object has its own heap and threads can be suspended during execution of for loop we see only a limited number of output i previous execution when we use an instance firnd in Countdown method, if we use a local var in for loop, threads will execute fully because then as each thread has its own copy local var it will work fully, local var is stored in thread stack

    public static void main(String[] args) {
        Countdown countdown = new Countdown();
//        Countdown countdown2 = new Countdown();

        CountdownThread t1 = new CountdownThread(countdown);
        t1.setName("Thread 1");
        CountdownThread t2 = new CountdownThread(countdown);
        t2.setName("Thread 2");

        t1.start();
        t2.start();
    }
}

class Countdown {
    private int i;
    public void doCountdown() {
        String color = switch (Thread.currentThread().getName()) {
            case "Thread 1" -> ThreadColor.ANSI_RED;
            case "Thread 2" -> ThreadColor.ANSI_BLUE;
            default -> ThreadColor.ANSI_GREEN;
        };

        for (i = 10; i >0; i--) {
            System.out.println(color + Thread.currentThread().getName() +
                    ": i=" + i);
        }
    }
}

class CountdownThread extends Thread {
    private Countdown threadCountdown;

    public CountdownThread(Countdown countdown) {
        threadCountdown = countdown;
    }

    public void run() {
        threadCountdown.doCountdown();
    }
}

output :

Thread 2: i=10
Thread 1: i=10
Thread 2: i=9
Thread 1: i=8
Thread 2: i=7
Thread 1: i=6
Thread 2: i=5
Thread 2: i=4
Thread 2: i=3
Thread 2: i=2
Thread 1: i=0

Process finished with exit code 0
