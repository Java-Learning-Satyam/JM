Section 10:

# List  
 
 List is a special type in java called an interface
 ,List interfaces descrives a set of mehtod signatures, that all list classes are expected to have 
 
The array list 
 the Array List is a class, that really maintains an array in memory, that's actually bigger than er need, in most cases
 it keep track of the capacity, ehich is the actual size of the array in memory
 if elements are added to an arrayList, its capacity may need to grow. THis all happens autometically, behind the scenes.
 
 This is why the aray list is resizeable.

 <> without this the compile time chacking won't ouccur -- so without this we will be allowing other type of data to be potentially included 

Array list 
.set will remove the first item and place that item on the first palce
.add will additem
.remove will reomve item
 
A way to create small array list
 ArrayList<String> nextList = new ArrayList<>(
                List.of("pickels","musters","cheese"));
        System.out.println(nextList);

Long one 
  ArrayList<GroceryItem> groceryList = new ArrayList<>();
        groceryList.add(new GroceryItem("Butter"));
        groceryList.add(new GroceryItem("milk"));
        groceryList.add(new GroceryItem("oranges", "Produce",5));
        groceryList.set(0,
                new GroceryItem("Appel", "Produce",5));
        groceryList.remove(1);
        System.out.println(groceryList);


printing method with record

record GroceryItem(String name, String type, int count) {

    public GroceryItem(String name) {
        this(name, "DAIRY", 1);
    }
    @Override
    public String toString() {
        return String.format("%d %s in %s", count, name.toUpperCase(), type);
    }

        grocery.addAll(nextList); --  to add two list's
        System.out.println("Third item = " + grocery.get(2)); -- to get an element from list 
        if (grocery.contains("chees")) { - check is an list contains a thing or not
            System.out.println("List contains musterd");
        }
	grocery.removeAll(List.of("apples","eggs")); -- to remove a set of elements
        
for more check ArrayList code file;

# Linked list 
 it is a ds you know about that 
 in java it is easy for a comperter to add or remove elements from a linked list , it is O(1)

 it is debetable that which is best array list or linked list 
 if we know the size then array list is good  use array list else, if the size of your list is grater then Integer.MAX , or you don't know the size then use Linked List
 
 Initilization
 
 LinkedList<String> linkLis = new LinkedList<>();
 you can use add, offer, addLast, offerLast, addFrst, offerFirst

  	list.addFirst("Darwin");
        list.addLast("Hobart");
        
	// Queue methods
        list.offer("Melbourne");
        list.offerFirst("Brisbane");
        list.offerLast("Toowoomba");
        
	// Stack Methods
        list.push("Alice Springs");


shift enter new line
ctrl alt L --reformating code
		
 private static void removeElements(LinkedList<String> list) {
        list.remove(4);
        list.remove("Brisbane");

        System.out.println(list);
        String s1 = list.remove();
        System.out.println("s1 was removed " + s1);

        String s2 = list.removeFirst();
        System.out.println("s2 was removed " + s2);

        String s3 = list.removeLast();
        System.out.println("s3 was removed " + s3);

        // Queue/Deque pool methods
        String p1 = list.poll(); //removes first element
        System.out.println(p1 + " Was removed");
        String p2 = list.pollFirst(); //removes first element
        System.out.println(p2 + " Was removed");
        String p3 = list.pollLast(); //removes Last element
        System.out.println(p3 + " Was removed");

        list.push("Sidney");
        list.push("Brisbane");
        list.push("Camberra");
        System.out.println(list);

        String p4 = list.pop(); // removes first element
        System.out.println(p4 + " Was removed");

    }

for more check LinkedList code file 
 
 # Ierator
 
 So far we've mainlu used loops like for , while etc..
 bit java provides other means to traverse list 
 two alternatives are the iterator, and the ListIterator

 instanciation/initilization

 ListIterator<String> iterator =  list.listIterator(1);

 when you get an instance of an iterator, you can call the (next) mehtod to get the next element in the list 
 you can use the (hasNext) method, to check if any elements remain to be processed
 
 iterator cursor positions, are btwn the elements 
 by default the pogistion for hasnext is previous to first element 
 
 # Boxing and Unboxing
 
 Some programming language dosent provide primitive data type , insted everything is an class or object 
 
 but java does provide primitive type , most languages does because primitive type provide additional support, no of elements can be great
 
 ArrayList, or the LinkedList -- these classes dosent support primitive , string is a class not primitive
 in other words we cant do the following 
 
 LinkedList<int> myIntegers = new LinkedList<>();

 so we can't use primitive in collections but..... java provide another thing called Wrapper Class 
 
 and we can go from a primitive to a weapper, which is called boxing
	
	Primitive -- wrapper -- primitive ko rapper mai dal k use ka =r reha hu -- to boxing 	

 or a wrapper to a primitive which is called unboxing
 
 	Wrapper -- Primitive -- wrapper mai sai primitive nikalna -- unboxing

 Integer boxedInt = valueOf(15); -- this return an instance of wrapper class in the boxedInt var
 
 this is depreciated -- Integer boxedInt = new Integer(15);

 valueOf is likely to yield siginficantly better space and time pefpormance
 
 in truth, we rarely have to manually box primitive, because java supports something called autoboxing.

 we can simply do 
 Integer boxedInt = 15; -- java allows this , this is also prefered
 Underneath the covers, java is doing the boxing. In other words an instance of integer is created, val is set to 15

 to get the value we can use 
 
 int unboxedInt = boxedInt.intValue(); -- this is konwn as manually unboxing, this is  unnecessary to manually nubox, we can directly unbox using 
 int unboxedInt = boxedint; -- in this the obj on R.H.S is of type intWrapper and we are assigining it to a primitive int, it is a prefferd way

 
# Enum -- Enumeration
 java describes the enum type as: A special sata type that contains predefined constants
 so an enum is a littel like an array except it's elements are known, not changable, and each elements can be referred to by a constant name, insted of an index pogistion

 an enum is oderd by natural order
 by convension enum name is upper cammel Case 
 Convension for cinstants in that all the value should be in upper Case

 ordina() -  (its position in its enum declaration, where the initial constant is assigned an ordinal of zero). 
 
 values() - Returns an array containing the constants of this enum type, in the order they're declared. This method may be used to iterate over the constants as follows:

     for(DayOfTheWeek c : DayOfTheWeek.values())
         System.out.println(c);
