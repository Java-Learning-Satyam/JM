# Array 
 An array is a data structure that allows you to store a sequence of values, all of the same type you can have array of any 8 primitive data type, can also have array for any class

To declare an array you can do 
 int[] integerArray; -- this common
	or	
 String CouresList[];

 First type of element you want to store , then square baracket which is a key for java to identify the cariable as an array

 To define the number the number of elements  

 int[] integerArray = new int[10];

 this is an anoyomous arra can only be used with an declerative statement
 int[] myArray = {1, 2, 3, 4, 5};
 This is called an anoyomous array becase the type isn't defined, java but java figures it out because it's being used in a decleration statement  

 this will give an error
 
int[] integerArray; 
 intArray = {1, 2, 3, 4, 5};
 this will give an error
 
intArray = new int{1, 2, 3, 4, 5}; -- this is right
 
# The Enhanced For Loop, The For Each Loop

 This loop was designed to walk through elements in an array, or some other type of collection
 it process one element at a time, from the firsr element to  the last

 for(decleration : collection) {
 // block of statements
 }

  for(int element : newArray) {
            System.out.print(element + " ");
        }
 
 # Java.util.Arrays
 
 Some common behaviour for array would be sorting, initilizing values, copying the array and finding an element

 For an array, this behaviour isn't on the array instance itself, but it's provided on a helper class, java.util.Arrays
 
         Arrays.fill(secondArray, 5); -- this fill the array with value 5 we use this if we dont want array initilize to initilize value

        Arrays.sort(firstArray); -- this is used to sort an array this dosent return new object insted it sort this array only

        int[] forthArray = Arrays.copyOf(thirdArray , thirdArray.length); -- to get a coppy of array you want
	
        int[] newArray = Arrays.copyOf(first, 5); -- can also create a copy of shorter or longer length

 get an rendom array 
	 public static int[] getRandomArray(int len) {
        Random random = new Random();
        int[] newInt =new int[len];
        for (int i = 0; i < len; i++) {
            newInt[i] = random.nextInt(100);
        }
        return newInt;
    }

 new keyword creates a new object in memory

# Varargs

 public static void main(String[] args) {}
 public static void main(String... args) {} -- we can also write main method like this, this gives extra functionality as calling code dosen't need to call using only from array it can also can call from string , or mulitile lr no args
 
 When can we use varargs
 
 There can be only one variable agrs in a method
 The car args must e the last argument

 Mutaiting method -- A method which works upon the orignal data passed, an change that only 
 this is a mutating method, of reversing elements in an array
 {1, 2, 3, 4, 5} -- to -- {5, 4, 3, 2, 1};

  public static void reverse(int[] array) { // pass in reference type variable pointing at the object in memory, newArray...so we modify newArray via array

        int maxIndex = array.length - 1;
        int halfLength = array.length / 2;

        for (int i = 0; i < halfLength; i++) {
            int temp = array[i];
            array[i] = array[maxIndex - i];
            array[maxIndex - i] = temp;
        }

        System.out.println(Arrays.toString(array));
    }

 # TWO-Dmentional array 
 there are a lot of ways to decleare a two-dimentiional array
 The most common,
 	
	int[][] myDoubleArray; -- this is the most clean way 

 	int[] myDoubleArray[];
 
